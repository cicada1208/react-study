{"version":3,"sources":["webpack:///./src/js/api_query.js"],"names":["url","printData","data","dataObj","results","forEach","el","artistName","collectionName","collectionViewUrl","artworkUrl100","$","append","getAlbum","axios","method","then","response","console","log","status","statusText","headers","config","request","error","message"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA,IAAMA,GAAG,GAAG,qDAAZ;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAIC,OAAO,GAAGD,IAAd;AACAC,SAAO,CAACC,OAAR,CAAgBC,OAAhB,CAAwB,UAAAC,EAAE,EAAI;AAAA,QAClBC,UADkB,GAC+CD,EAD/C,CAClBC,UADkB;AAAA,QACNC,cADM,GAC+CF,EAD/C,CACNE,cADM;AAAA,QACUC,iBADV,GAC+CH,EAD/C,CACUG,iBADV;AAAA,QAC6BC,aAD7B,GAC+CJ,EAD/C,CAC6BI,aAD7B;AAE1BC,iDAAC,CAAC,MAAD,CAAD,CAAUC,MAAV,yGAGoBF,aAHpB,uCAG4DD,iBAH5D,8FAMaF,UANb,sCAOaC,cAPb;AAWH,GAbD;AAcH;;AAED,SAASK,QAAT,GAAoB;AAChB;AACAC,8CAAK,CAAC;AACFd,OAAG,EAAEA,GADH;AAEFe,UAAM,EAAE;AAFN,GAAD,CAAL,CAGGC,IAHH,CAGQ,UAAAC,QAAQ,EAAI;AAChB;AACAhB,aAAS,CAACgB,QAAQ,CAACf,IAAV,CAAT,CAFgB,CAGhB;;AACAgB,WAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB,EAJgB,CAKhB;;AACAF,WAAO,CAACC,GAAR,CAAYF,QAAQ,CAACI,UAArB,EANgB,CAOhB;AACA;AACA;;AACAH,WAAO,CAACC,GAAR,CAAYF,QAAQ,CAACK,OAArB,EAVgB,CAWhB;;AACAJ,WAAO,CAACC,GAAR,CAAYF,QAAQ,CAACM,MAArB,EAZgB,CAahB;AACA;AACA;;AACAL,WAAO,CAACC,GAAR,CAAYF,QAAQ,CAACO,OAArB;AACH,GApBD,WAoBS,UAAAC,KAAK,EAAI;AACd,QAAIA,KAAK,CAACR,QAAV,EAAoB;AAChB;AACA;AACAC,aAAO,CAACO,KAAR,CAAcA,KAAK,CAACR,QAAN,CAAeG,MAA7B;AACAF,aAAO,CAACO,KAAR,CAAcA,KAAK,CAACR,QAAN,CAAeI,UAA7B;AACAH,aAAO,CAACO,KAAR,CAAcA,KAAK,CAACR,QAAN,CAAef,IAA7B;AACAgB,aAAO,CAACO,KAAR,CAAcA,KAAK,CAACR,QAAN,CAAeK,OAA7B;AACH,KAPD,MAOO,IAAIG,KAAK,CAACD,OAAV,EAAmB;AACtB;AACA;AACA;AACAN,aAAO,CAACO,KAAR,CAAcA,KAAK,CAACD,OAApB;AACH;;AACDN,WAAO,CAACO,KAAR,CAAc,QAAd,EAAwBA,KAAK,CAACC,OAA9B;AACAR,WAAO,CAACO,KAAR,CAAcA,KAAK,CAACF,MAApB;AACH,GApCD,EAFgB,CAwChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDZ,6CAAC,CAAC,YAAM;AACJE,UAAQ;AACX,CAFA,CAAD,C","file":"api_query.9e012cd5709a16c328f2.js","sourcesContent":["import $ from 'jquery'\nimport axios from 'axios'\n\nconst url = 'https://itunes.apple.com/search?term=twice&limit=10'\n\nfunction printData(data) {\n    let dataObj = data\n    dataObj.results.forEach(el => {\n        const { artistName, collectionName, collectionViewUrl, artworkUrl100 } = el\n        $('body').append(`\n        <div class=\"card\">\n            <div class=\"image\">\n                <img src=\"${artworkUrl100}\" onclick=\"window.open('${collectionViewUrl}')\"/>\n            </div>\n            <div class=\"info\">\n                <p>${artistName}</p>\n                <p>${collectionName}</p>\n            </div>\n        </div>\n        `)\n    })\n}\n\nfunction getAlbum() {\n    // method 3:\n    axios({\n        url: url,\n        method: 'get'\n    }).then(response => {\n        // `data` is the response that was provided by the server\n        printData(response.data);\n        // `status` is the HTTP status code from the server response\n        console.log(response.status);\n        // `statusText` is the HTTP status message from the server response\n        console.log(response.statusText);\n        // `headers` the HTTP headers that the server responded with\n        // All header names are lower cased and can be accessed using the bracket notation.\n        // Example: `response.headers['content-type']`\n        console.log(response.headers);\n        // `config` is the config that was provided to `axios` for the request\n        console.log(response.config);\n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance in the browser\n        console.log(response.request);\n    }).catch(error => {\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.error(error.response.status);\n            console.error(error.response.statusText);\n            console.error(error.response.data);\n            console.error(error.response.headers);\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser \n            // and an instance of http.ClientRequest in node.js\n            console.error(error.request);\n        }\n        console.error('Error:', error.message);\n        console.error(error.config);\n    });\n\n    // // method 2:\n    // fetch(url, {\n    //     method: 'get'\n    // }).then(res => {\n    //     // fetch 和 jQuery.ajax() 的差異：\n    //     // fetch() 回傳的 promise 物件, 當遇到 HTTP Status 404, 500 時\n    //     // 仍會使用 resolve 但 res.ok 為 false，\n    //     // reject 只在網路發生錯誤或任何中斷請求時才使用。\n    //     if (!res.ok) throw new Error('Network response was not ok.');\n    //     // 可透過 blob(), json(), text() 取得資料\n    //     // 若出現錯誤：\"Failed to execute 'json' on 'Response': body stream is locked\"\n    //     // 原因為 Response methode like 'json', 'text' can be called once, and then it locks.\n    //     // 可使用下列方法將 json 暫存\n    //     let json = res.json();\n    //     console.log(json);\n    //     return json;\n    // }).then(json =>\n    //     printData(json)\n    // ).catch(err =>\n    //     console.error(err)\n    // );\n\n    // // method 1:\n    // var request = $.ajax({\n    //     url,\n    //     method: 'get'\n    // });\n    // request.done(function (data, textStatus, jqXHR) {\n    //     printData(JSON.parse(data))\n    // });\n    // request.fail(function (jqXHR, textStatus, errorThrown) {\n    //     alert(textStatus)\n    // });\n    // request.always(function () {\n    //     // alert(\"complete\")\n    // });\n}\n\n$(() => {\n    getAlbum();\n})\n"],"sourceRoot":""}