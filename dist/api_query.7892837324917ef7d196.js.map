{"version":3,"sources":["webpack:///./src/js/api_query.js"],"names":["getAlbum","axios","url","method","then","response","data","results","forEach","el","artistName","collectionName","collectionViewUrl","artworkUrl100","$","append","console","log","status","statusText","headers","config","request","error","message"],"mappings":"6FAAA,qDAuBA,SAASA,IAELC,IAAM,CACFC,IAvBI,sDAwBJC,OAAQ,QACTC,MAAK,SAAAC,GAEMA,EAASC,KAvBfC,QAAQC,SAAQ,SAAAC,GAAM,IAClBC,EAAiED,EAAjEC,WAAYC,EAAqDF,EAArDE,eAAgBC,EAAqCH,EAArCG,kBAAmBC,EAAkBJ,EAAlBI,cACvDC,IAAE,QAAQC,OAAV,mGAGoBF,EAHpB,oCAG4DD,EAH5D,0FAMaF,EANb,oCAOaC,EAPb,0DAuBAK,QAAQC,IAAIZ,EAASa,QAErBF,QAAQC,IAAIZ,EAASc,YAIrBH,QAAQC,IAAIZ,EAASe,SAErBJ,QAAQC,IAAIZ,EAASgB,QAIrBL,QAAQC,IAAIZ,EAASiB,YAnBzB,OAoBS,SAAAC,GACDA,EAAMlB,UAGNW,QAAQO,MAAMA,EAAMlB,SAASa,QAC7BF,QAAQO,MAAMA,EAAMlB,SAASc,YAC7BH,QAAQO,MAAMA,EAAMlB,SAASC,MAC7BU,QAAQO,MAAMA,EAAMlB,SAASe,UACtBG,EAAMD,SAIbN,QAAQO,MAAMA,EAAMD,SAExBN,QAAQO,MAAM,SAAUA,EAAMC,SAC9BR,QAAQO,MAAMA,EAAMF,WAyC5BP,KAAE,WACEd,S","file":"api_query.7892837324917ef7d196.js","sourcesContent":["import $ from 'jquery'\nimport axios from 'axios'\n\nconst url = 'https://itunes.apple.com/search?term=twice&limit=10'\n\nfunction printData(data) {\n    let dataObj = data\n    dataObj.results.forEach(el => {\n        const { artistName, collectionName, collectionViewUrl, artworkUrl100 } = el\n        $('body').append(`\n        <div class=\"card\">\n            <div class=\"image\">\n                <img src=\"${artworkUrl100}\" onclick=\"window.open('${collectionViewUrl}')\"/>\n            </div>\n            <div class=\"info\">\n                <p>${artistName}</p>\n                <p>${collectionName}</p>\n            </div>\n        </div>\n        `)\n    })\n}\n\nfunction getAlbum() {\n    // method 3:\n    axios({\n        url: url,\n        method: 'get'\n    }).then(response => {\n        // `data` is the response that was provided by the server\n        printData(response.data);\n        // `status` is the HTTP status code from the server response\n        console.log(response.status);\n        // `statusText` is the HTTP status message from the server response\n        console.log(response.statusText);\n        // `headers` the HTTP headers that the server responded with\n        // All header names are lower cased and can be accessed using the bracket notation.\n        // Example: `response.headers['content-type']`\n        console.log(response.headers);\n        // `config` is the config that was provided to `axios` for the request\n        console.log(response.config);\n        // `request` is the request that generated this response\n        // It is the last ClientRequest instance in node.js (in redirects)\n        // and an XMLHttpRequest instance in the browser\n        console.log(response.request);\n    }).catch(error => {\n        if (error.response) {\n            // The request was made and the server responded with a status code\n            // that falls out of the range of 2xx\n            console.error(error.response.status);\n            console.error(error.response.statusText);\n            console.error(error.response.data);\n            console.error(error.response.headers);\n        } else if (error.request) {\n            // The request was made but no response was received\n            // `error.request` is an instance of XMLHttpRequest in the browser \n            // and an instance of http.ClientRequest in node.js\n            console.error(error.request);\n        }\n        console.error('Error:', error.message);\n        console.error(error.config);\n    });\n\n    // // method 2:\n    // fetch(url, {\n    //     method: 'get'\n    // }).then(res => {\n    //     // fetch 和 jQuery.ajax() 的差異：\n    //     // fetch() 回傳的 promise 物件, 當遇到 HTTP Status 404, 500 時\n    //     // 仍會使用 resolve 但 res.ok 為 false，\n    //     // reject 只在網路發生錯誤或任何中斷請求時才使用。\n    //     if (!res.ok) throw new Error('Network response was not ok.');\n    //     // 可透過 blob(), json(), text() 取得資料\n    //     // 若出現錯誤：\"Failed to execute 'json' on 'Response': body stream is locked\"\n    //     // 原因為 Response methode like 'json', 'text' can be called once, and then it locks.\n    //     // 可使用下列方法將 json 暫存\n    //     let json = res.json();\n    //     console.log(json);\n    //     return json;\n    // }).then(json =>\n    //     printData(json)\n    // ).catch(err =>\n    //     console.error(err)\n    // );\n\n    // // method 1:\n    // var request = $.ajax({\n    //     url,\n    //     method: 'get'\n    // });\n    // request.done(function (data, textStatus, jqXHR) {\n    //     printData(JSON.parse(data))\n    // });\n    // request.fail(function (jqXHR, textStatus, errorThrown) {\n    //     alert(textStatus)\n    // });\n    // request.always(function () {\n    //     // alert(\"complete\")\n    // });\n}\n\n$(() => {\n    getAlbum();\n})\n"],"sourceRoot":""}